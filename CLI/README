# Setup of a demo configuration tested on Ubuntu 18.04
# Requirements:
# open ports from 32768 to 61000
## python3 with flask flask_cors pymongo paho-mqtt docker, if not present use pip3 install ....
## mosquitto running
## docker running with docker0 bridge address space 172.17.0.1/16
## docker-hub repository of ThingVisors and Silo Flavours: https://hub.docker.com/u/fed4iot

# activate python3 bash autocompletition
sudo apt-get install python3-argcomplete 
sudo activate-global-python-argcomplete3

# run a mongo container for storing system state. Mongo is reacheable through 32768 on public IP

docker run -d --name mongo-container -p 32768:27017 mongo:3.4.18

#(if already run but stopped, use docker start mongo-container)
#(to reset the DB delete the container and run it again)
#(to explore DB use mongo-compass and connect to the ip address of the container)

# build the necessary ThingVisor containers (it may be not necessary if they are in the docker hub, as for those used in this README)
# use "fed4iot" as prefix and "-tv" as suffix for indicating that it is a ThingVisor
# cd Thingvisors/DockerThingVisor/ThingVisor_HelloWorld
# docker build -t fed4iot/helloworld-tv .

# build the necessary flavour containers (it may be not necessary if they are in the docker hub, as for those used in this README )
# use "fed4iot" as prefix and "-f" as suffix for indicating that it is a flavour
#cd Flavours/mobius-base-flavour/
#docker build -t fed4iot/mobius-base-f .

# run the master-controller
cd Master-Controller/
# configure the IP addresses and ports in settings.py
# for install all dependencies use the file requirements.txt in the folder Master-Controller
pip3 install -r requirements.txt

# file db_setup.py used by master-controller.py for setting parameters for the 'admin' user with password 'passw0rd'
# run master-controller.py
python3 master-controller.py

# now use the CLI (or POSTMAN)
# use "python3 f4i.py" and press tab for autocompletition
# use "python3 f4i.py -h" for help
# use e.g. "python3 f4i.py create-vsilo -h" for sub help

# move top CLI directory to use the Command Line Interface
cd CLI

# login as admin
# Access control uses JWT (JSON Web Token)
# latest access token stored in $HOME/.viriot/token and used for every inteaction with the master controller
python3 f4i.py login -c http://127.0.0.1:8090 -u admin -p passw0rd


#as 'admin' register user 'tenant1' with passwork 'password' and role 'user'
python3 f4i.py register -c http://127.0.0.1:8090 -u tenant1 -p password -r user

# add a vSilo flavour for Mobius
python3 f4i.py add-flavour -c http://127.0.0.1:8090 -f Mobius-base-f -s Mobius -i fed4iot/mobius-base-f:2.2 -d "silo with a oneM2M Mobius broker"

# add other vSilo flavours
# FIWARE
# python3 f4i.py add-flavour -c http://127.0.0.1:8090 -f orion-f -i fed4iot/orion-f:2.2 -d "silo with a FIWARE Orion broker" -s ""

#RAW MQTT
python3 f4i.py add-flavour -c http://127.0.0.1:8090 -f mqtt-f -i fed4iot/raw-mqtt-f:2.2 -d "silo with a Mosquitto broker" -s ""


# list flavours
python3 f4i.py list-flavours


# add ThingVisor v-weather with some cities
python3 f4i.py add-thingvisor -c http://127.0.0.1:8090 -i fed4iot/v-weather-tv:2.2 -n weather -p "{'cities':['Rome', 'Tokyo','Murcia','Grasse','Heidelberg'], 'rate':60}" -d "Weather ThingVisor"

#add thingVisor for oneM2M container on oneM2M of EGM in Grasse. Change poaIP with public IP address of running machines 

python3 f4i.py add-thingvisor -c http://127.0.0.1:8090 -i fed4iot/onem2m-tv:2.2 -n EGM-Abbass -d "OneM2M data from EGM Abbass sensor" -p "{'CSEurl':'https://fed4iot.eglobalmark.com','origin':'Superman', 'poaPort':'8089','cntArn':'Abbas123456/humidity/value','poaIP':'127.0.0.1','vThingName':'EGM-Abbas123456-humidity','vThingDescription':'OneM2M humidity data from EGM Abbass sensor'}"


# add thingVisor FIWARE Murcia, change notify_ip address with the public address of the running machine
python3 f4i.py add-thingvisor -c http://127.0.0.1:8090  -i fed4iot/fiware-greedy-tv:2.2 -n Murcia_Sensors -p '{\"ocb_service\":[\"trafico\",\"aparcamiento\",\"pluviometria\",\"tranvia\",\"autobuses\",\"bicis\",\"lecturas\",\"gps\",\"suministro\"], \"ocb_ip\":\"fiware-dev.inf.um.es\", \"ocb_port\":\"1026\", \"notificacion_protocol\":\"http\", \"notify_ip\":\"52.166.130.229\"}' -d "Greedy ThingVisor for FIWARE Murcia Platform"

# add ThingVisor Hello World
# python3 f4i.py add-thingvisor -c http://127.0.0.1:8090 -i fed4iot/helloworld-tv -n helloWorld -d "hello thingVisor"
# helloworld-tv periodically produces an array of NGSI-LD entity as follows
# [{'id': 'urn:ngsi-ld:HelloSensor1', 'type': 'my-counter', 'counter': {'type': 'Property', 'value': '413'}}, {'id': 'urn:ngsi-ld:HelloSensor2', 'type': 'my-double-counter', 'double-counter': {'type': 'Property', 'value': '826'}}]

#list ThingVisor, including info about vThingIDs of the handled virtual things 
python3 f4i.py list-thingvisors

#logout as admin and login as tenant1 if you prefer but some operation are formbidden as user
# python3 f4i.py logout
# python3 f4i.py login -u tenant1 -p password


#create a oneM2M based virtual Silo (this will start a flavour container for the tenant)
python3 f4i.py create-vsilo -c http://127.0.0.1:8090 -t tenant1 -f Mobius-base-f -s Silo1
# this returns the private IP address of the vsilo broker (Mobius in this demo) and the port to use for accessing, and also the port mapping by the whitch is possible to acces the broker using the  public IP address of the platform

# Create FIWARE Orion based Silo2 and rawMQTT Silo3
python3 f4i.py create-vsilo -c http://127.0.0.1:8090 -t tenant1 -f orion-f -s Silo2 
python3 f4i.py create-vsilo -c http://127.0.0.1:8090 -t tenant1 -f mqtt-f -s Silo3

# inspect tenant1 information 

#inspect tenant info
python3 f4i.py inspect-tenant -t tenant1

# browse Silo1 broker content through public IP, otherwise use docker private IP
#use chorme with ModHeader exension 
# add request headers 
## 'X-M2M-RI'   'S'
## 'X-M2M-Origin'  Superman
# then access http://[public-ip]:[mapped port for 7579]/Mobius?rcn=4 


# browse Silo2 broker content through public IP, otherwise use docker private IP
# http://[public-ip]:[mapped port for 1026]/v2/entities


# add some vThings to the Silo1 (oneM2M)
python3 f4i.py add-vthing -c http://127.0.0.1:8090 -t tenant1 -s Silo1 -v weather/Tokyo_temp
python3 f4i.py add-vthing -c http://127.0.0.1:8090 -t tenant1 -s Silo1 -v weather/Tokyo_pressure
python3 f4i.py add-vthing -c http://127.0.0.1:8090 -t tenant1 -s Silo1 -v EGM-Abbass/EGM-Abbas123456-humidity
python3 f4i.py add-vthing -c http://127.0.0.1:8090 -t tenant1 -s Silo1 -v Murcia_Sensors/1

# browse vSilo1 broker oneM2M AEs (ty=2) or containers (ty=3) 
# http://[public-ip]:[mapped port for 7579]/Mobius?fu=1&ty=2
# get latest value of a container 
# http://[public-ip]:[mapped port for 7579]/Mobius/Murcia_Sensors:1/Sensor:Aparcamiento:101/libres/la


# add some vThings to the Silo2 (FIWARE)
python3 f4i.py add-vthing -c http://127.0.0.1:8090 -t tenant1 -s Silo2 -v weather/Tokyo_temp
python3 f4i.py add-vthing -c http://127.0.0.1:8090 -t tenant1 -s Silo2 -v weather/Tokyo_pressure
python3 f4i.py add-vthing -c http://127.0.0.1:8090 -t tenant1 -s Silo2 -v EGM-Abbass/EGM-Abbas123456-humidity
python3 f4i.py add-vthing -c http://127.0.0.1:8090 -t tenant1 -s Silo2 -v Murcia_Sensors/1

# browse vSilo2 Orion broker  
# http://[public-ip]:[mapped port for 1026]/v2/entities
#http://[public-ip]:[mapped port for 1026]//v2/entities/urn:ngsi-ld:Sensor:Aparcamiento:101/attrs/libres

# add some vThings to the Silo3 (rawMQTT)
python3 f4i.py add-vthing -c http://127.0.0.1:8090 -t tenant1 -s Silo3 -v weather/Tokyo_temp
python3 f4i.py add-vthing -c http://127.0.0.1:8090 -t tenant1 -s Silo3 -v weather/Tokyo_pressure

# add node-red for upstream demo 
# npm install node-red-contrib-graphs from the container to enable graph plugin
# connect to the public-ip and mapped docker port for 1883 to obtain pubblicatin from vSilo broker
# one topic for vThings whose topicname is tenant_id/vThingID, e.g. tenant1/weather/Tokyo_temp
# example with mosquitto_sub
#  mosquitto_sub -h 52.166.130.229 -p 32776 -t "#" -v

# inspect broker content using chrome to see the added oneM2M AEs as reported in deliverable D2.2 



# reverse the process and clean the system
# delete vThings (it is possible also to directly destroy the vSilos)
python3 f4i.py del-vthing -c http://127.0.0.1:8090 -t tenant1 -s Silo1 -v weather/Tokyo_temp
python3 f4i.py del-vthing -c http://127.0.0.1:8090 -t tenant1 -s Silo1 -v weather/Tokyo_pressure
python3 f4i.py del-vthing -c http://127.0.0.1:8090 -t tenant1 -s Silo1 -v EGM-Abbass/EGM-Abbas123456-humidity
python3 f4i.py del-vthing -c http://127.0.0.1:8090 -t tenant1 -s Silo1 -v Murcia_Sensors/1

python3 f4i.py del-vthing -c http://127.0.0.1:8090 -t tenant1 -s Silo2 -v weather/Tokyo_temp
python3 f4i.py del-vthing -c http://127.0.0.1:8090 -t tenant1 -s Silo2 -v weather/Tokyo_pressure
python3 f4i.py del-vthing -c http://127.0.0.1:8090 -t tenant1 -s Silo2 -v EGM-Abbass/EGM-Abbas123456-humidity
python3 f4i.py del-vthing -c http://127.0.0.1:8090 -t tenant1 -s Silo2 -v Murcia_Sensors/1

# destroy virtual Silos (this destroy the tenant container, any data is lost)
python3 f4i.py destroy-vsilo -c http://127.0.0.1:8090 -t tenant1 -s Silo1
python3 f4i.py destroy-vsilo -c http://127.0.0.1:8090 -t tenant1 -s Silo2
python3 f4i.py destroy-vsilo -c http://127.0.0.1:8090 -t tenant1 -s Silo3

# delete virtual ThingVisor (this will destroy the contaier used for the ThingVisor)
python3 f4i.py del-thingvisor -c http://127.0.0.1:8090 -n Murcia_Sensors  
python3 f4i.py del-thingvisor -c http://127.0.0.1:8090 -n weather
python3 f4i.py del-thingvisor -c http://127.0.0.1:8090 -n EGM-Abbass

# delete flavour
python3 f4i.py del-flavour -c http://127.0.0.1:8090 -n Mobius-base-f
python3 f4i.py del-flavour -c http://127.0.0.1:8090 -n orion-f
python3 f4i.py del-flavour -c http://127.0.0.1:8090 -n mqtt-f

# now system should be empty
python3 f4i.py list-flavours
python3 f4i.py list-thingvisors
python3 f4i.py list-vsilos
python3 f4i.py inspect-tenant -t tenant1
