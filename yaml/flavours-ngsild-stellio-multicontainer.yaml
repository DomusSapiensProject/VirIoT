apiVersion: apps/v1
kind: Deployment
metadata:
  name: stellio-silo-controller
spec:
  selector:
    matchLabels:
      app: stellio-silo-controller
  replicas: 1
  strategy: {}
  template:
    metadata:
      labels:
        app: stellio-silo-controller
    spec:
      containers:
      - name: ngsildsilocontroller
        image: fed4iot/ngsild-silocontroller:3.0
        resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: stellio-api-gateway
  name: api-gateway
spec:
  selector:
    matchLabels:
      app: stellio-api-gateway
  replicas: 1
  strategy: {}
  template:
    metadata:
      labels:
        app: stellio-api-gateway
    spec:
      containers:
      - env:
        - name: SPRING_PROFILES_ACTIVE
          value: docker
        - name: APPLICATION_SUBSCRIPTION_SERVICE_URL
          value: subscription
        image: 'stellio/stellio-api-gateway:latest'
        name: stellio-api-gateway
        ports:
        - containerPort: 8080
          name: api-gateway
        resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: stellio-entity-service
  name: entity-service
spec:
  selector:
    matchLabels:
      app: stellio-entity-service
  replicas: 1
  strategy: {}
  template:
    metadata:
      labels:
        app: stellio-entity-service
    spec:
      containers:
        - env:
          - name: APPLICATION_AUTHENTICATION_ENABLED
            value: "false"
          - name: SPRING_DATA_NEO4J_PASSWORD
            value: neo4j_password
          - name: SPRING_PROFILES_ACTIVE
            value: docker
          - name: SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS
            value: stellio-kafka:9092
          image: 'stellio/stellio-entity-service:latest'
          name: stellio-entity-service
          ports:
            - containerPort: 8082
              name: entity-service
          resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: stellio-kafka
  name: stellio-kafka
spec:
  selector:
    matchLabels:
      app: stellio-kafka
  replicas: 1
  strategy: {}
  template:
    metadata:
      labels:
        app: stellio-kafka
    spec:
      containers:
      - env:
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: KAFKA_ADVERTISED_LISTENERS
          value: INTERNAL://$(MY_POD_IP):29092,EXTERNAL://stellio-kafka:9092
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: INTERNAL
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
        - name: KAFKA_LOG4J_ROOT_LOGLEVEL
          value: INFO
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: zookeeper:2181
        image: confluentinc/cp-kafka:5.4.1
        name: stellio-kafka
        ports:
        - containerPort: 9092
          name: stellio-kafka
        resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: stellio-neo4j
  name: neo4j
spec:
  selector:
    matchLabels:
      app: stellio-neo4j
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: stellio-neo4j
    spec:
      containers:
      - env:
        - name: NEO4J_PASSWORD
          value: neo4j_password
        - name: NEO4J_AUTH
          value: neo4j/$(NEO4J_PASSWORD)
        - name: NEO4J_dbms_allow__upgrade
          value: "false"
        - name: NEO4J_dbms_default__database
          value: stellio
        - name: NEO4J_dbms_security_procedures_unrestricted
          value: "apoc.*"
        - name: NEO4J_dbms_security_procedures_whitelist
          value: "apoc.*"
        - name: NEO4JLABS_PLUGINS
          value: "[\"apoc\"]"
        image: neo4j:4.0
        name: stellio-neo4j
        ports:
        - containerPort: 7474
        - containerPort: 7687
          name: neo4j
        resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: stellio-postgres
  name: postgres
spec:
  selector:
    matchLabels:
      app: stellio-postgres
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: stellio-postgres
    spec:
      containers:
      - env:
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: STELLIO_SEARCH_DB_DATABASE
          value: stellio_search
        - name: STELLIO_SEARCH_DB_USER
          value: stellio_search
        - name: STELLIO_SEARCH_DB_PASSWORD
          value: stellio_search_db_password
        - name: STELLIO_SUBSCRIPTION_DB_DATABASE
          value: stellio_subscription
        - name: STELLIO_SUBSCRIPTION_DB_USER
          value: stellio_subscription
        - name: STELLIO_SUBSCRIPTION_DB_PASSWORD
          value: stellio_subscription_db_password
        - name: POSTGRES_MULTIPLE_DATABASES
          value: "$(STELLIO_SEARCH_DB_DATABASE),$(STELLIO_SEARCH_DB_USER),$(STELLIO_SEARCH_DB_PASSWORD): $(STELLIO_SUBSCRIPTION_DB_DATABASE),$(STELLIO_SUBSCRIPTION_DB_USER),$(STELLIO_SUBSCRIPTION_DB_PASSWORD)"
        - name: POSTGRES_PASSWORD
          value: postgres_password
        image: stellio/stellio-timescale-postgis:latest
        name: stellio-postgres
        ports:
        - containerPort: 5432
          name: postgres
        resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: stellio-search-service
  name: search-service
spec:
  selector:
    matchLabels:
      app: stellio-search-service
  replicas: 1
  strategy: {}
  template:
    metadata:
      labels:
        app: stellio-search-service
    spec:
      containers:
        - env:
          - name: APPLICATION_AUTHENTICATION_ENABLED
            value: "false"
          - name: STELLIO_SEARCH_DB_DATABASE
            value: stellio_search
          - name: SPRING_FLYWAY_URL
            value: jdbc:postgresql://postgres/$(STELLIO_SEARCH_DB_DATABASE)
          - name: SPRING_PROFILES_ACTIVE
            value: docker
          - name: SPRING_R2DBC_PASSWORD
            value: stellio_search_db_password
          - name: SPRING_R2DBC_URL
            value: r2dbc:postgresql://postgres/$(STELLIO_SEARCH_DB_DATABASE)
          - name: SPRING_R2DBC_USERNAME
            value: stellio_search
          - name: SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS
            value: stellio-kafka:9092
          - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
            value: stellio-kafka:9092
          image: 'stellio/stellio-search-service:latest'
          name: stellio-search-service
          ports:
          - containerPort: 8083
            name: search-service
          resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: subscription-service
spec:
  selector:
    matchLabels:
      app: stellio-subscription-service
  replicas: 1
  strategy: {}
  template:
    metadata:
      labels:
        app: stellio-subscription-service
    spec:
      containers:
        - env:
          - name: APPLICATION_AUTHENTICATION_ENABLED
            value: "false"
          - name: STELLIO_SUBSCRIPTION_DB_DATABASE
            value: stellio_subscription
          - name: SPRING_PROFILES_ACTIVE
            value: docker
          - name: SPRING_FLYWAY_URL
            value: jdbc:postgresql://postgres/$(STELLIO_SUBSCRIPTION_DB_DATABASE)
          - name: SPRING_R2DBC_PASSWORD
            value: stellio_subscription_db_password
          - name: SPRING_R2DBC_URL
            value: r2dbc:postgresql://postgres/$(STELLIO_SUBSCRIPTION_DB_DATABASE)
          - name: SPRING_R2DBC_USERNAME
            value: stellio_subscription
          - name: SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS
            value: stellio-kafka:9092
          - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
            value: stellio-kafka:9092
          image: 'stellio/stellio-subscription-service:latest'
          name: stellio-subscription-service
          ports:
            - containerPort: 8084
              name: subscription
          resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: stellio-zookeeper
  name: zookeeper
spec:
  selector:
    matchLabels:
      app: stellio-zookeeper
  replicas: 1
  strategy: {}
  template:
    metadata:
      labels:
        app: stellio-zookeeper
    spec:
      containers:
      - env:
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name: ZOOKEEPER_SERVER_ID
          value: "1"
        - name: ZOOKEEPER_TICK_TIME
          value: "2000"
        image: confluentinc/cp-zookeeper:5.4.1
        name: stellio-zookeeper
        ports:
        - containerPort: 2181
          name: zookeeper
        resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: stellio-api-gateway
  name: api-gateway
spec:
  type: NodePort
  ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
  selector:
    app: stellio-api-gateway
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: stellio-entity-service
  name: entity-service
spec:
  ports:
    - name: "8082"
      port: 8082
      targetPort: 8082
  selector:
    app: stellio-entity-service
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: stellio-kafka
  name: stellio-kafka
spec:
  ports:
    - name: "9092"
      port: 9092
      targetPort: 9092
  selector:
    app: stellio-kafka
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: stellio-neo4j
  name: neo4j
spec:
  ports:
    - name: "7474"
      port: 7474
      targetPort: 7474
    - name: "7687"
      port: 7687
      targetPort: 7687
  selector:
    app: stellio-neo4j
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: postgres
  name: postgres
spec:
  ports:
    - name: "5432"
      port: 5432
      targetPort: 5432
  selector:
    app: stellio-postgres
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: stellio-search-service
  name: search-service
spec:
  ports:
    - name: "8083"
      port: 8083
      targetPort: 8083
  selector:
    app: stellio-search-service
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: stellio-subscription-service
  name: subscription-service
spec:
  ports:
    - name: "8084"
      port: 8084
      targetPort: 8084
  selector:
    app: stellio-subscription-service
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: stellio-zookeeper
  name: zookeeper
spec:
  ports:
    - name: "2181"
      port: 2181
      targetPort: 2181
  selector:
    app: stellio-zookeeper
status:
  loadBalancer: {}