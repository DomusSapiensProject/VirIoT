#
#Copyright Odin Solutions S.L. All Rights Reserved.
#
#SPDX-License-Identifier: Apache-2.0
#

version: "3.5"
services:

  ######
  ### CapabilityManager
  ######
  capabilitymanager:
    build: ./Py_CapabilityManagerWebService/
    image: fed4iot/capability-manager
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    ports:
        - "3040:3030"
    restart: unless-stopped
    volumes:
      #- ./Py_CapabilityManagerWebService/certs/fullchain.pem:/opt/API-CM/certs/server-public-cert.pem  # volumes to import certificates to container
      #- ./Py_CapabilityManagerWebService/certs/privkey.pem:/opt/API-CM/certs/server-priv-rsa.pem
      - ./Py_CapabilityManagerWebService/certs/server-public-cert.pem:/opt/API-CM/certs/server-public-cert.pem  # volumes to import certificates to container
      - ./Py_CapabilityManagerWebService/certs/server-priv-rsa.pem:/opt/API-CM/certs/server-priv-rsa.pem
    environment:
        #- capman_protocol=http #(OPTIONAL default https)
        - keyrock_protocol=https
        - keyrock_host=<specify IdM Public IP address>
        - keyrock_port=443
        - keyrock_admin_email=admin@test.com
        - keyrock_admin_pass=1234

        #Validate Capability token using blockchain: Admitted values: "0: No use; 1:Use"
        - blockchain_usevalidation=0

        #Environment variables are considered only if blockchain_usevalidation=1
        #BlockChain protocol. Admitted values: "http","https"
        - blockchain_protocol=http
        #BlockChain host.
        - blockchain_host=<specify Blockchain endpoint IP address> #<specify Blockchain endpoint IP address> # Required
        - blockchain_port=8000

        # PDP_URL format: https://<XACML-PDP-IP>:<XACML-PDP-PORT><XACML-PDP-SERVICE>
        - PDP_URL=<specify XACML-PDP Public address (including service)>

  ######
  ### XACML
  ######
  xacml:
    build: ./XACML_PAP_PDP/
    image: fed4iot/pap-pdp
    expose:
      - "8080"
    ports:
      - "8080:8080"
    restart: unless-stopped

    # ALL environment variables are optionals.
    # BlockChain_integration to indicate if blockchain integration is considered or not.
    # The rest of BlockChain_* variables are used if blockchain integration is considered.
    environment:

        #BlockChain_integration : admittable values:
        # 0-No integration with blockchain
        # 1-Integration with blockchain
        # Default value : 0 
        - BlockChain_integration=0

        #BlockChain_configuration : admittable values:
        # 0-Uses configuration from blockchain.conf file.
        # 1-Uses configuration from folling environment variables.
        - BlockChain_configuration=0 # Optional: Default value : 0

        #Environment variables are considered only if BlockChain_integration=1
        - BlockChain_protocol=http # Optional: Default value : http
        - BlockChain_domain=<specify Blockchain domain> #<specify Blockchain dommain> # Required 
        - BlockChain_IP=<specify Blockchain endpoint IP address> #<specify Blockchain endpoint IP address> # Required
        - BlockChain_port=8000 # Optional Default value : 8000

        - BlockChain_get_resource=/policy/<specify Blockchain domain> # Optional : Default value : /policy/<BlockChain_domain>
        - BlockChain_post_resource=/policy/register # Optional : Default value : /policy/register
        - BlockChain_update_resource=/policy/update # Optional : Default value : /policy/update  

  ######
  ### PEP-Proxy
  ######
  pepproxy:
    build: ./Py_PEP-Proxy/
    image: fed4iot/pep-proxy
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    ports:
        - "1040:1027"
    restart: unless-stopped
    volumes:
      #- ./Py_PEP-Proxy/certs/fullchain.pem:/opt/PEP-Proxy/certs/server-public-cert.pem  # volumes to import certificates to container
      #- ./Py_PEP-Proxy/certs/privkey.pem:/opt/PEP-Proxy/certs/server-priv-rsa.pem
      - ./Py_PEP-Proxy/certs/server-public-cert.pem:/opt/PEP-Proxy/certs/server-public-cert.pem  # volumes to import certificates to container
      - ./Py_PEP-Proxy/certs/server-priv-rsa.pem:/opt/PEP-Proxy/certs/server-priv-rsa.pem
    environment:
      #- pep_protocol=http #(OPTIONAL default https)

      #Broker protocol. Admitted values: "http","https"
      - target_protocol=http
      #Broker host.
      - target_host=<specify Broker Public IP address>
      - target_port=1026
      #Broker API. Admitted values: "NGSIv1","NGSIv2","NGSILDv1","GenericAPI", "Fed4IoTMC"
      - target_API=Fed4IoTMC #<specify Broker API type>

      #Validate Capability token using blockchain: Admitted values: "0: No use; 1:Use"
      - blockchain_usevalidation=0
      
      #Environment variables are considered only if blockchain_usevalidation=1
      #BlockChain protocol. Admitted values: "http","https"
      - blockchain_protocol=http
      #BlockChain host.
      - blockchain_host=<specify BlockChain Public IP address>
      - blockchain_port=8000

      # PEP proxy endpoint: protocol+ip+port
      # HOST NO admitted: 0.0.0.0, localhost, 127.0.0.1
      - PEP_ENDPOINT=PEP_ENDPOINT=<specify PEP-Proxy Public address ex: https://<PEP-IP>:<PEP-PORT>>

      #Fed4IoT Master Controller protocol. Admitted values: "http","https"
      - fed4iotmc_protocol=<define protocol>
      #Fed4IoT Master Controller host.
      - fed4iotmc_host=<define host> #<specify Fed4IoT Master Controller Public IP address>
      #Fed4IoT Master Controller Port.
      - fed4iotmc_port=<define port>
      - fed4iotmc_authz_testpath=/listFlavours # to obtain if it using JWT token has authorisation 
      - fed4iotmc_login_path=/login
      - fed4iotmc_login_userID=<define user>
      - fed4iotmc_login_password=<define user>

